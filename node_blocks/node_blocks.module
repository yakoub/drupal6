<?php

function node_blocks_menu() {
  $items['node/%node/content_blocks'] = array(
    'title' => 'Content blocks',
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_blocks_edit', 1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/content/node_blocks'] = array(
    'title' => 'Content blocks',
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_blocks_settings'),
    'file' => 'node_blocks.admin.inc',
  );
  return $items;
}

function node_blocks_node_update($node) {
  db_delete('node_blocks')
    ->condition('nid', $node->nid)
    ->execute();
  $cid = 'node-block-fragments-' . $node->nid;
  cache_clear_all($cid, 'cache_node_blocks');
}

function node_blocks_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'teaser') {
    return;
  }

  $body_item = field_get_items('node', $node, 'body');
  if (!$body_item) {
    return;
  }
  $format = $body_item[0]['format'];

  $body = array();
  $node_blocks = node_blocks_load($node->nid, $full = TRUE);
  if (!$node_blocks) {
    $node_blocks = node_blocks_load_default($node);
    if (!$node_blocks) {
      return;
    }
  }

  foreach ($node_blocks as $part => $block) {
    if (isset($block->bid)) {
      $body[] = node_blocks_view_block($block);
    }
    $body[] = array('#markup' => check_markup($block->paragraph, $format));
  }
  $node->content['body'] = $body;
}

function node_blocks_edit($form, &$form_state, $node) {
  $body_item = field_get_items('node', $node, 'body');
  if (!$body_item) {
    return;
  }
  $format = $body_item[0]['format'];

  $form = array (
    'fragments' => array('#type' => 'fieldset', '#tree' => TRUE),
  );

  $node_blocks = node_blocks_load($node->nid);

  $system_blocks = _block_rehash();
  $js_blocks = array();
  $blocks_info = array();
  foreach ($system_blocks as $block) {
    $js_blocks[ $block['module'] ][ $block['bid'] ] = check_plain($block['info']);
    $blocks_info[ $block['bid'] ] = check_plain($block['info']);
  }

  $form_state['node'] = $node;

  $fragments = node_blocks_fragments($node);

  foreach ($fragments as $part => $fragment) {
    $form['fragments'][$part] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
    );

    $form['fragments'][$part]['block_form'] = array(
      '#markup' => '',
    );

    $form['fragments'][$part]['block'] = array(
      '#type' => 'hidden',
      '#default_value' => '',
    );

    if (isset($node_blocks[$part]->bid)) {
      $bid = $node_blocks[$part]->bid;
      $form['fragments'][$part]['block_form']['#markup']
        = '<div class = "block-form-handle"> ' . $blocks_info[$bid] . '</div>';
      $form['fragments'][$part]['block']['#default_value'] = $bid;
    }
    else {
      $form['fragments'][$part]['block_form']['#markup']
        = '<div class = "block-form-handle"> ' . t('Add block') . '</div>';
    }

    $form['fragments'][$part]['display'] = array(
      '#prefix' => '<div class="fragment-wrapper">',
      '#value' => check_markup($fragment, $format),
      '#suffix' => '</div>',
    );

    $form['fragments'][$part]['text'] = array(
      '#type' => 'value',
      '#value' => $fragment,
    );
  }

  drupal_add_js(array('node_blocks' => $js_blocks), 'setting');
  $path = drupal_get_path('module', 'node_blocks');
  drupal_add_js($path . '/node_blocks.js');
  drupal_add_css($path . '/node_blocks.css');

  $form['block_form'] = array(
    '#title' => t('Block selection'),
    '#attributes' => array('style' => 'display:none', 'class' => array('block-form')),
    '#type' => 'fieldset',

    'block_modules' => array(
      '#type' => 'select',
      '#title' => t('By module'),
      '#options' => array_keys($js_blocks),
    ),

    'block_deltas' => array(
      '#type' => 'select',
      '#title' => t('Block title'),
      '#options' => array(),
    ),
    
    'block_operations' => array(
      '#markup' => 
        '<div class="block-operations">' .
          '<span class="block-save">' . t('Save') . '</span>' .
          '<span class="block-cancel">' . t('Cancel') . '</span>' .
        '</div>'
    ),
  );

  array_unshift($form['block_form']['block_modules']['#options'], 'None');

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function node_blocks_edit_submit($form, &$form_state) {
  $node = $form_state['node'];
  db_delete('node_blocks')
    ->condition('nid', $node->nid)
    ->execute();

  $insert = db_insert('node_blocks');
  $insert->fields(array('nid', 'paragraph', 'part', 'bid'));
  $values = array();
  foreach ($form_state['values']['fragments'] as $part => $fragment) {
    $values[0] = $node->nid;
    $values[1] = $fragment['text'];
    $values[2] = $part;
    if ($fragment['block']) {
      $values[3] = $fragment['block'];
    }
    else {
      $values[3] = NULL;
    }
    $insert->values($values);
  }
  $insert->execute();
  $form_state['redirect'] = 'node/' . $node->nid;
}

function node_blocks_fragments($node) {
  $dom = new DOMDocument();
  $body_item = field_get_items('node', $node, 'body');
  if (!$body_item) {
    return array();
  }
  try {
    $dom->loadHTML('<?xml encoding="UTF-8">' . $body_item[0]['value']);
  }
  catch (Exception $e) {
    return array('Error:' . $e->getMessage(), 'Line:' . $e->getLine());
  }
  $html_body = $dom->getElementsByTagName('body')->item(0);
  if (!$html_body->childNodes) {
    return array();
  }
  $fragments = array();
  $fragment = new DOMDocument();
  $last_node = '';

  try {
    foreach ($html_body->childNodes as $node) {
      $node = $fragment->importNode($node, TRUE);
      $fragment->appendChild($node);
      $last_node = $node->localName;
      if ($node->localName == 'p') {
        $fragments[] = $fragment;
        $fragment = new DOMDocument();
      }
    }
    if ($last_node != 'p') {
      $fragments[] = $fragment;
    }
  }
  catch (Exception $e) {
    return array('Error:' . $e->getMessage(), 'Line:' . $e->getLine());
  }
  
  foreach ($fragments as &$fragment) {
    $fragment = $fragment->saveHTML();
  }

  return $fragments;
}

function node_blocks_load($nid, $full = FALSE) {
  $query = db_select('node_blocks', 'nb');
  $query->condition('nb.nid', $nid);
  $query->fields('nb');
  if ($full) {
    $query->leftJoin('block', 'b', 'b.bid = nb.bid');
    $query->fields('b');
  }
  $node_blocks = array();
  $results = $query->execute()->fetchAll();
  foreach ($results as $block) {
    $node_blocks[$block->part] = $block;
  }
  return $node_blocks;
}

function node_blocks_load_default($node) {
  $blocks = node_block_default_configuration();

  $cid = 'node-block-fragments-' . $node->nid;
  if ($cache = cache_get($cid, 'cache_node_blocks')) {
    $fragments = $cache->data;
  }
  else {
    $fragments = node_blocks_fragments($node);
    cache_set($cid, $fragments, 'cache_node_blocks');
  }
  $node_blocks = array();
  foreach ($fragments as $part => $fragment) {
    $node_blocks[$part] = isset($blocks[$part]) ? $blocks[$part] : new stdClass();
    $node_blocks[$part]->paragraph = $fragment;
  }
  return $node_blocks;
}

function node_block_default_configuration() {
  $cid = 'node-blocks-default';
  $default_blocks = array();
  if ($cache = cache_get($cid)) {
    $default_blocks = $cache->data;
  }
  else {
    $default_blocks = variable_get('node_blocks_default', '');
    if (!$default_blocks) {
      return FALSE;
    }

    $query = db_select('block', 'b');
    $query->fields('b');
    $query->condition('bid', array_values($default_blocks), 'IN');
    $results = $query->execute()->fetchAll();
    $loaded_blocks = array();
    foreach ($results as $block) {
      $loaded_blocks[$block->bid] = $block;
    }
    foreach ($default_blocks as $part => &$bid) {
      $bid = $loaded_blocks[$bid];
    }
    cache_set($cid, $default_blocks);
  }
  return $default_blocks;
}

function node_blocks_view_block($block) {
  $key = "{$block->module}_{$block->delta}";
  $blocks = array($key => $block);
  $blocks = _block_render_blocks($blocks);
  $build = _block_get_renderable_array($blocks);
  return $build;
}

