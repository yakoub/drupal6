<?php

function node_blocks_menu() {
  $items['node/%node/content_blocks'] = array(
    'title' => 'Content blocks',
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_blocks_edit', 1),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function node_blocks_nodeapi(&$node, $op, $teaser) {
  
  if ($op == 'update') {
    db_query('delete from {node_blocks} where nid=%d', $node->nid);
  }

  if ($op == 'view' and !$teaser) {
    $body = '';
    $node_blocks = node_blocks_load($node->nid, TRUE);
    foreach ($node_blocks as $part => $block) {
      $block_content = $block->content;
      if ($block->bid) {
        $body .= node_blocks_view_block($block);
      }
      $body .= check_markup($block_content, $node->format);
    }
    if ($body) {
      $node->content['body']['#value'] = $body;
    }
  }
}

function node_blocks_edit(&$form_state, $node) {
  $form = array (
    'fragments' => array('#type' => 'fieldset', '#tree' => TRUE),
  );

  $node_blocks = node_blocks_load($node->nid);
  $system_blocks = _block_rehash();
  $js_blocks = array();
  $blocks_info = array();
  foreach ($system_blocks as $block) {
    $js_blocks[ $block['module'] ][ $block['bid'] ] = check_plain($block['info']);
    $blocks_info[ $block['bid'] ] = check_plain($block['info']);
  }

  $form_state['node'] = $node;

  $fragments = node_blocks_fragments($node);

  foreach ($fragments as $part => $fragment) {
    $form['fragments'][$part] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
    );

    $form['fragments'][$part]['block_form'] = array(
      '#type' => 'markup',
    );

    $form['fragments'][$part]['block'] = array(
      '#type' => 'hidden',
      '#default_value' => '',
    );

    if ($node_blocks[$part]->bid) {
      $bid = $node_blocks[$part]->bid;
      $form['fragments'][$part]['block_form']['#value']
        = '<div class = "block-form-handle"> ' . $blocks_info[$bid] . '</div>';
      $form['fragments'][$part]['block']['#default_value'] = $bid;
    }
    else {
      $form['fragments'][$part]['block_form']['#value']
        = '<div class = "block-form-handle"> ' . t('Add block') . '</div>';
    }

    $form['fragments'][$part]['display'] = array(
      '#prefix' => '<div class="fragment-wrapper">',
      '#value' => check_markup($fragment, $node->format),
      '#suffix' => '</div>',
    );

    $form['fragments'][$part]['text'] = array(
      '#type' => 'value',
      '#value' => $fragment,
    );
  }

  drupal_add_js(array('node_blocks' => $js_blocks), 'setting');
  $path = drupal_get_path('module', 'node_blocks');
  drupal_add_js($path . '/node_blocks.js');
  drupal_add_css($path . '/node_blocks.css');

  $form['block_form'] = array(
    '#title' => t('Block selection'),
    '#attributes' => array('style' => 'display:none', 'class' => 'block-form'),
    '#type' => 'fieldset',

    'block_modules' => array(
      '#type' => 'select',
      '#title' => t('By module'),
      '#options' => array_keys($js_blocks),
    ),

    'block_deltas' => array(
      '#type' => 'select',
      '#title' => t('Block title'),
      '#options' => array(),
    ),
    
    'block_operations' => array(
      '#type' => 'markup',
      '#value' => 
        '<div class="block-operations">' .
          '<span class="block-save">' . t('Save') . '</span>' .
          '<span class="block-cancel">' . t('Cancel') . '</span>' .
        '</div>'
        ,
    ),
  );

  array_unshift($form['block_form']['block_modules']['#options'], 'None');

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function node_blocks_edit_submit($form, &$form_state) {
  $node = $form_state['node'];
  db_query('delete from {node_blocks} where nid=%d', $node->nid);
  $values_modifiers = array();
  $values = array();
  foreach ($form_state['values']['fragments'] as $part => $fragment) {
    $values[] = $node->nid;
    $values[] = $fragment['text'];
    $values[] = $part;
    if ($fragment['block']) {
      $values[] =  $fragment['block'];
      $values_modifiers[] = '(%d, \'%s\', %d, %d)';
    }
    else {
      $values[] =  'NULL';
      $values_modifiers[] = '(%d, \'%s\', %d, %s)';
    }
  }
  if ($values) {
    db_query('insert into {node_blocks} values ' . implode($values_modifiers, ','), $values);
  }
  $form_state['redirect'] = 'node/' . $node->nid;
}

function node_blocks_fragments($node) {
  $dom = new DOMDocument();
  try {
    $dom->loadHTML('<?xml encoding="UTF-8">' . $node->body);
  }
  catch (Exception $e) {
    return array('Error:' . $e->getMessage(), 'Line:' . $e->getLine());
  }
  $html_body = $dom->getElementsByTagName('body');
  $fragments = array();
  $fragment = new DOMDocument();
  $last_node = '';

  try {
    foreach ($html_body[0]->childNodes as $node) {
      $node = $fragment->importNode($node, TRUE);
      $fragment->appendChild($node);
      $last_node = $node->localName;
      if ($node->localName == 'p') {
        $fragments[] = $fragment;
        $fragment = new DOMDocument();
      }
    }
    if ($last_node != 'p') {
      $fragments[] = $fragment;
    }
  }
  catch (Exception $e) {
    return array('Error:' . $e->getMessage(), 'Line:' . $e->getLine());
  }
  
  foreach ($fragments as &$fragment) {
    $fragment = $fragment->saveHTML();
  }

  return $fragments;
}

function node_blocks_load($nid, $full = FALSE) {
  if ($full) {
    $query = <<<SQL
    select * from {node_blocks} n
    left join {blocks} b on b.bid = n.bid
    where nid = %d
SQL;
    $result = db_query($query, $nid);
  }
  else {
    $result = db_query('select * from {node_blocks} where nid = %d', $nid);
  }
  $node_blocks = array();
  while ($block = db_fetch_object($result)) {
    $node_blocks[$block->part] = $block;
  }
  return $node_blocks;
}

function node_blocks_view_block($block) {
  $block_view = module_invoke($block->module, 'block', 'view', $block->delta);
  $block->content = $block_view['content'];
  if ($block->title) {
    $block->subject = $block->title == '<none>' ? '' : check_plain($block->title);
  }
  else {
    $block->subject = empty($block_view['subject']) ? '' : $block_view['subject'];
  }
  return theme('block', $block);
}
